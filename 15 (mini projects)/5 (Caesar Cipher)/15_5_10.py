# TODO –ê–≤–µ, –¶–µ–∑–∞—Ä—å üå∂Ô∏è
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ –Ω–∞ –¥–ª–∏–Ω—É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞). –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç—Ä–æ—á–Ω—ã–º–∏, –∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ ‚Äì –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–∏–º–≤–æ–ª—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è.
from os.path import split


def alphabet_english_lower():
    return "".join([chr(char) for char in range(ord("a"), ord("z") + 1)])


def alphabet_english_upper():
    return "".join([chr(char) for char in range(ord("A"), ord("Z") + 1)])


def alphabet_russian_lower():
    return "".join([chr(char) for char in range(ord("–∞"), ord("—è") + 1)])


def alphabet_russian_upper():
    return "".join([chr(char) for char in range(ord("–ê"), ord("–Ø") + 1)])


dictionary = []
dictionary.append(alphabet_english_lower())
dictionary.append(alphabet_english_upper())
dictionary.append(alphabet_russian_lower())
dictionary.append(alphabet_russian_upper())


def cript_letter(letter_, shift_):
    if letter_ in dictionary[0]:
        return dictionary[0][(dictionary[0].index(letter_) + shift_) % len(dictionary[0])]
    elif letter_ in dictionary[1]:
        return dictionary[1][(dictionary[1].index(letter_) + shift_) % len(dictionary[1])]
    elif letter_ in dictionary[2]:
        return dictionary[2][(dictionary[2].index(letter_) + shift_) % len(dictionary[2])]
    elif letter_ in dictionary[3]:
        return dictionary[3][(dictionary[3].index(letter_) + shift_) % len(dictionary[3])]
    else:
        return letter_


def cript_string(str_in_, shift_):
    str_out_ = ""
    for i in str_in_:
        str_out_ = str_out_ + str(cript_letter(i, shift_))
    return str_out_

def len_(word_):
        shift_ = 0
        for i in word_:
            if i.isalpha():
                shift_ += 1
        return shift_


# str_in, shift = input("String: "), input("Keys: ")
str_in, str_out = input().split(), []

for i in str_in:
    str_out.append(cript_string(i, len_(i)))

print(" ".join(str_out))
