# TODO Project - –£–≥–∞–¥–∞–π–∫–∞ —á–∏—Å–µ–ª üîÉ
# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
# –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100 –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ.
# –ï—Å–ª–∏ –¥–æ–≥–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞,
# —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'.
# –ï—Å–ª–∏ –¥–æ–≥–∞–¥–∫–∞ –º–µ–Ω—å—à–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
# '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ,
# —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–í—ã —É–≥–∞–¥–∞–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!'.
#
# –°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:
#
# –¶–µ–ª—ã–µ —á–∏—Å–ª–∞ (—Ç–∏–ø int);
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ;
# –í–≤–æ–¥ / –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏–∏ input() –∏ print());
# –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (if/elif/else);
# –¶–∏–∫–ª while;
# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª;
# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã break, continue;
# –†–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª–µ–º random –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.

# 1. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Å—á–µ—Ç –ø–æ–ø—ã—Ç–æ–∫, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ö–æ–≥–¥–∞ —á–∏—Å–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–æ,
# –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫;
# 2. –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∏—Å–ª–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–≥—Ä–∞), –ø–æ—Å–ª–µ —Ç–æ–≥–æ,
# –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ;
# 3. –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
# –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ (–æ—Ç 1 –¥–æ n).

import random


def number_to_words(num):
    ones = ['–Ω–æ–ª—å', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ',
            '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å',
            '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å',
            '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å']
    tens = ['–Ω–æ–ª—å', '–¥–µ—Å—è—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫',
            '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ']
    if num < 20:
        return ones[num]
    else:
        if num % 10 == 0:
            return tens[num // 10]
        else:
            return tens[num // 10] + ' ' + ones[num % 10]


def is_valid(st):
    # return True if st.isdigit() else False
    if st.isdigit():
        print('TEST is_valid True')
        return True
    else:
        print('TEST is_valid False')
        return False


def borders_num(answer):
    while True:
        st = input()
        # return int(st) if is_valid(st) else print(answer)
        if is_valid(st):
            st = int(st)
            if st > 1 and st < 100000:
                print('TEST borders_num True')
                return st
        else:
            print('TEST borders_num False')
            print(answer)


def input_num(answer):
    while True:
        st = input()
        # return int(st) if is_valid(st) else print(answer)
        if is_valid(st):
            print('TEST input_num True')
            st = int(st)
            return st
        else:
            print('TEST input_num False')
            print(answer)


# –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É')
while True:
    print('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É —á–∏—Å–ª–∞:')
    last_num = input_num('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1')
    num = random.randint(1, last_num)
    attempts = 0

    print('TEST Generated: ', num)
    print('–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ', last_num)
    while True:
        player_num = input_num(('–ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ-—Ç–∞–∫–∏ –≤–≤–µ–¥–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ', last_num, '?'))
        attempts += 1
        print('–ü–æ–ø—ã—Ç–∫–∞', number_to_words(attempts), '- –ß–∏—Å–ª–æ', player_num)
        if player_num > num:
            print('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
        if player_num < num:
            print('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
        if player_num == num:
            print('–í—ã —É–≥–∞–¥–∞–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
            break
    print('–ò–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑? (y/n)')
    if input().lower() != 'y':
        break
print('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–≥—Ä–∞–ª–∏ –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É. –ï—â–µ —É–≤–∏–¥–∏–º—Å—è...')
